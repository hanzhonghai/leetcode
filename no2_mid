leetcode 第二题 难度中等
地址: https://leetcode-cn.com/problems/add-two-numbers/

题目描述：
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

    输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
    输出：7 -> 0 -> 8
    原因：342 + 465 = 807
    

题目分析：
    用一个变量保存进位，依次做加法和进位

题解：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        ListNode *tmp1 = l1;
        ListNode *tmp2 = l2;
        int res=0;int rema=0;
        while(l1->next !=NULL && l2->next!=NULL)
        {
            res= (l1->val+l2->val+rema)%10;
            rema = (l1->val+l2->val+rema)/10;
            l1->val = res;
            l1= l1->next;
            l2= l2->next;
        }
        res= (l1->val+l2->val+rema)%10;
        rema = (l1->val+l2->val+rema)/10;
        l1->val = res;
        if(l1->next == NULL)
        {
            l1->next=l2->next;
        }
        while(l1->next !=NULL && rema)
        {
            l1=l1->next;
            res = (l1->val +rema)%10;
            rema = (l1->val +rema)/10;
            l1->val = res;
        } 
        if(rema)
        {
            ListNode * tmp = new ListNode(rema);
            l1->next= tmp;
        }
        return tmp1;
    }
};   

