leetcode 第三题
地址：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/

题目描述：

给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

    输入: "abcabcbb"
    输出: 3
    解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

    输入: "bbbbb"
    输出: 1
    解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

    输入: "pwwkew"
    输出: 3
    解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
        请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。


分析：
    我列出了2种解发
    第一种解法是最容易被想到的，就是挨个字符去遍历找到重复即结束遍历，求出结果。时间复杂度是O(n2)
    第二种解法是借助一个vector，一次遍历就可得到结果 时间负责度是O(N)

题解1 最容易想到的解题方法：

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.empty()) return 0;
        int res=0;
        int len = s.size();
        for(int i = 0;i<len;i++)
        {
            int tmp = 1;
            for(int j =i+1;j<len;j++)
            {
                if(s.substr(i,j-i).find(s[j]) == string::npos)
                    tmp++;
                else
                    break;
            }
            res = max(res,tmp);
        }
        return res;
    }

};

题解2 借助vector:
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> dict(256, -1);//ascii共占8位二进制数，共256个字符编码，其中包括a~z
        int start = -1;
        int maxlen = 0;
        for(int i = 0; i < s.length(); i++)
        {
            if(dict[s[i]] > start)
                start = dict[s[i]];//发现和前面重复的字母，并改变start标志
            dict[s[i]] = i;
            maxlen = max(maxlen, i - start);
        }
        return maxlen;
    }
};
